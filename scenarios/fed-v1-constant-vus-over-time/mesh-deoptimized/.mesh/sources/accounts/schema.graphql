schema {
  query: Query
}

directive @key(selectionSet: String!) on OBJECT

directive @computed(selectionSet: String!) on FIELD_DEFINITION

directive @merge(argsExpr: String, keyArg: String, keyField: String, key: [String!], additionalArgs: String) on FIELD_DEFINITION

directive @canonical on OBJECT | INTERFACE | INPUT_OBJECT | UNION | ENUM | SCALAR | FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @key(fields: _FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @external(reason: String) on OBJECT | FIELD_DEFINITION

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @extends on OBJECT | INTERFACE

type Query {
  _entities(representations: [_Any!]!): [_Entity]! @merge
  _service: _Service!
  me: User
  user(id: ID!): User
  users: [User]
}

type User @key(selectionSet: "{ id }") {
  id: ID!
  name: String
  username: String
}

scalar _FieldSet

scalar _Any

type _Service {
  sdl: String
}

union _Entity = User