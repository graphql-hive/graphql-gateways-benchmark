on:
  workflow_call:
    inputs:
      scenarioName:
        type: string
        required: true
      runner:
        type: string
        required: true
      mode:
        type: string
        required: true
      gateway:
        type: string
        required: true
      vu:
        type: number
        required: true
      time:
        type: string
        required: true
      cpuLimit:
        type: string
        required: true
      memoryLimit:
        type: string
        required: true
      subgraphDelay:
        type: number
        default: 0

jobs:
  test:
    runs-on: ${{ startsWith(inputs.runner, '{') && fromJSON(inputs.runner) || inputs.runner }}
    name: ${{ inputs.gateway }}
    steps:
      - name: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        
      - name: setup node
        uses: the-guild-org/shared-config/setup@v1
        with:
          node-version-file: .node-version

      - name: setup rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v2
        
      - name: run subgraphs
        run: |
          make run-subgraphs &
        env:
          SUBGRAPH_DELAY_MS: ${{ inputs.subgraphDelay }}

      - uses: grafana/setup-k6-action@v1

      - name: install
        run: ./install.sh
        working-directory: gateways/${{ inputs.gateway }}

      - name: configure eqemu
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
        with:
          platforms: 'linux/arm64,linux/amd64'

      - name: configure docker buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: login to docker registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Metrics Container
        run: |
          docker compose -f docker-compose.metrics.yaml up -d --wait --force-recreate --build

      - name: wait for subgraphs
        uses: iFaxity/wait-on-action@main
        with:
          resource: http://localhost:4200/health

      - name: run benchmark (${{ inputs.time }})
        timeout-minutes: 600
        run: make test gateway=${{ inputs.gateway }} mode=${{ inputs.mode }}
        env:
          BENCH_VUS: ${{ inputs.vu }}
          BENCH_OVER_TIME: ${{ inputs.time }}
          MEM_LIMIT: ${{ inputs.memoryLimit }}
          CPU_LIMIT: ${{ inputs.cpuLimit }}

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: always()
        with:
          name: ${{ inputs.scenarioName }}_${{ inputs.gateway }}
          path: |
            gateways/${{ inputs.gateway }}/k6_summary.json
            gateways/${{ inputs.gateway }}/k6_summary.txt
            gateways/${{ inputs.gateway }}/gateway_log.txt
            gateways/${{ inputs.gateway }}/*.png
            gateways/${{ inputs.gateway }}/data.csv
            gateways/${{ inputs.gateway }}/stats.json
